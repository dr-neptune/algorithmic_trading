#+TITLE: Chapter 6: Building Classes for Event-Based Backtesting

Potential short-comings of vectorized backtesting:

1. Look-ahead bias
   It doesn't take into account that new data arrives incrementally
2. Simplification
   There are things that can't be easily modeled, like fixed
   transaction costs or fixed amounts per trade or the
   non-divisibility of single financial instruments
3. Non-recursiveness
   Algorithms embodying trading strategies might recurse state
   variables over time

Event-based backtesting allows one to address these issues to some
extent. An *event* is characterized by the arrival of new
data. Advantages of event-based backtesting:

1. Incremental approach
2. Realistic Modeling
3. Path Dependency
   It is straight-forward to keep track of conditional, recursive, or
   otherwise path-dependent statistics (e.g. max or min of price seen
   so far)
4. Reusability
   There is a lot of overlap in the programming for different types of
   trading strategies
5. Close to trading

* Backtesting Base Class

This base class should take care of:
1. Retrieving and preparing data
2. Helper and convenience functions
3. Placing orders
4. Closing out positions

#+begin_src python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('tkAgg')

class BacktestBase:
    """
    Base class for event-based backtesting of trading strategies.

    Attributes
    ==========
    symbol: str
        TR RIC (financial instrument) to be used
    start: str
        start date for data selection
    end: str
        end date for data selection
    amount: float
        amount to be invested either once or per trade
    ftc: float
        fixed transaction costs per trade (buy or sell)
    ptc: float
        proportional transaction costs per trade (buy or sell)

    Methods
    =======
    get_data:
        retrieves and prepares the base data set
    plot_data:
        plots the closing price for the symbol
    get_date_price:
        returns the date and price for the given bar
    print_balance:
        prints out the current (cash) balance
    print_net_wealth:
        prints out the current net wealth
    place_buy_order:
        places a buy order
    place_sell_order:
        places a sell order
    close_out:
        closes out a long or short position
    """
    def __init__(self, symbol, start, end, amount, ftc=0.0, ptc=0.0, verbose=True):
        self.symbol = symbol
        self.start = start
        self.end = end
        self.initial_amount = amount
        self.amount = amount
        self.ftc = ftc
        self.ptc = ptc
        self.units = 0
        self.position = 0
        self.trades = 0
        self.verbose = verbose
        self.get_data()

    def get_data(self):
        """retrieves and prepares data"""
        raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                          index_col=0, parse_dates=True)
        raw = pd.DataFrame(raw[self.symbol])
        raw = raw.loc[self.start:self.end].rename(columns={self.symbol: 'price'})
        raw['return'] = np.log(raw / raw.shift(1))
        self.data = raw.dropna()

    def plot_data(self, cols=None):
        """plots the closing prices for symbol"""
        if cols is None:
            cols = ['price']
        self.data['price'].plot(title=self.symbol)
        plt.show()

    def get_date_price(self, bar):
        """get date and price for bar"""
        date = str(self.data.index[bar])[:10]
        price = self.data.price.iloc[bar]
        return date, price

    def print_balance(self, bar):
        """print out current cash balance info"""
        date, _ = self.get_date_price(bar)
        print(f"{date} | current balance: {self.amount:.2f}")

    def print_net_wealth(self, bar):
        """print out current bash balance info"""
        date, price = self.get_date_price(bar)
        net_wealth = self.units * price + self.amount
        print(f"{date} | current net wealth: {net_wealth:.2f}")

    def place_buy_order(self, bar, units=None, amount=None):
        """place a buy order"""
        date, price = self.get_date_price(bar)
        if units is None:
            units = int(amount / price)
        self.amount -= (units * price) * (1 + self.ptc) + self.ftc
        self.units += units
        self.trades += 1
        if self.verbose:
            print(f"{date} | buying {units} units at {price:.2f}")
            self.print_balance(bar)
            self.print_net_wealth(bar)

    def place_sell_order(self, bar, units=None, amount=None):
        """place a sell order"""
        date, price = self.get_date_price(bar)
        if units is None:
            units = int(amount / price)
        self.amount += (units * price) * (1 - self.ptc) - self.ftc
        self.units -= units
        self.trades += 1
        if self.verbose:
            print(f"{date} | selling {units} units at {price:.2f}")
            self.print_balance(bar)
            self.print_net_wealth(bar)

    def close_out(self, bar):
        """close out a long or short position"""
        date, price = self.get_date_price(bar)
        self.amount += self.units * price
        self.units = 0
        self.trades += 1
        if self.verbose:
            print(f"{date} | inventory {self.units} units at {price:.2f}")
            print('=' * 55)
        print(f"Final Balance:\t\t[$] {self.amount:.2f}")
        perf = ((self.amount - self.initial_amount) /
                self.initial_amount * 100)
        print(f'Net Performance:\t[%] {perf:.2f}')
        print(f"Trades Executed:\t[#] {self.trades:.2f}")
        print('=' * 55)
#+end_src

#+begin_src python
bb = BacktestBase('AAPL.O', '2010-1-1', '2019-12-31', 10000)

print(bb.data.info())
print(bb.data.tail())
bb.plot_data()
#+end_src

* Long-Only Backtesting Class

Certain investor preferences or regulations might prohibit short
selling as part of a trading strategy. As a consequence, a trader or
portfolio manager is only allowed to enter long positions or to park
capital in the form of cash or similar low risk assets, like money
market accounts.

#+begin_src python
class BacktestLongOnly(BacktestBase):
    def run_sma_strategy(self, SMA1, SMA2):
        """
        Backtesting on a SMA-based Strategy

        Params
        === === === ===
        SMA1, SMA2: int
            shorter and longer term simple moving average (in days)
        """
        msg = dedent(f"""
        Running SMA strategy : SMA1={SMA1} & SMA2={SMA2}
        Fixed Costs: {self.ftc}
        Proportional Costs: {self.ptc}
        {'=' * 55}
        """)
        print(msg)
        self.position = 0                  # initial neutral position
        self.trades = 0                    # no trades yet
        self.amount = self.initial_amount  # reset initial capital
        self.data['SMA1'] = self.data['price'].rolling(SMA1).mean()
        self.data['SMA2'] = self.data['price'].rolling(SMA2).mean()

        for bar in range(SMA2, len(self.data)):
            if self.position == 0:
                if self.data['SMA1'].iloc[bar] > self.data['SMA2'].iloc[bar]:
                    self.place_buy_order(bar, amount=self.amount)
                    self.position = 1  # long position
            elif self.position == 1:
                if self.data['SMA1'].iloc[bar] < self.data['SMA2'].iloc[bar]:
                    self.place_sell_order(bar, units=self.units)
                    self.position = 0  # market neutral

        self.close_out(bar)

    def run_momentum_strategy(self, momentum):
        """
        Backtesting a momentum-based strategy

        Parameters
        === === ===
        momentum: int
            number of days for mean return calculation
        """
        msg = dedent(f"""
        Running momentum strategy : {momentum} days
        Fixed Costs: {self.ftc}
        Proportional Costs: {self.ptc}
        {'=' * 55}
        """)
        print(msg)
        self.position = 0                  # initial neutral position
        self.trades = 0                    # no trades yet
        self.amount = self.initial_amount  # reset initial capital

        self.data['momentum'] = self.data['return'].rolling(momentum).mean()

        for bar in range(momentum, len(self.data)):
            if self.position == 0:
                if self.data['momentum'].iloc[bar] > 0:
                    self.place_buy_order(bar, amount=self.amount)
                    self.position = 1  # long position
            elif self.position == 1:
                if self.data['momentum'].iloc[bar] < 0:
                    self.place_sell_order(bar, units=self.units)
                    self.position = 0  # market neutral

        self.close_out(bar)

    def run_mean_reversion_strategy(self, SMA, threshold):
        """
        Backtesting a mean reversion strategy

        Parameters
        ==========
        SMA: int
            simple moving average in days
        threshold: float
            absolute value for deviation-based signal relative to SMA
        """
        msg = dedent(f"""
        Running mean-reversion strategy : SMA={SMA} & THR={threshold}
        Fixed Costs: {self.ftc}
        Proportional Costs: {self.ptc}
        {'=' * 55}
        """)
        print(msg)
        self.position = 0                  # initial neutral position
        self.trades = 0                    # no trades yet
        self.amount = self.initial_amount  # reset initial capital

        self.data['SMA'] = self.data['price'].rolling(SMA).mean()

        for bar in range(SMA, len(self.data)):
            if self.position == 0:
                if (self.data['price'].iloc[bar] < self.data['SMA'].iloc[bar] - threshold):
                    self.place_buy_order(bar, amount=self.amount)
                    self.position = 1  # long position
            elif self.position == 1:
                if (self.data['price'].iloc[bar] >= self.data['SMA'].iloc[bar]):
                    self.place_sell_order(bar, units=self.units)
                    self.position = 0  # market neutral

        self.close_out(bar)
#+end_src

#+begin_src python
def run_strategies(lobt: BacktestLongOnly):
    lobt.run_sma_strategy(42, 252)
    lobt.run_momentum_strategy(60)
    lobt.run_mean_reversion_strategy(50, 5)

lobt = BacktestLongOnly('AAPL.O', '2010-1-1', '2019-12-31', 10000, verbose=True)

run_strategies(lobt)
#+end_src

Cool! The output here is a log like so:

#+begin_src txt
Running SMA strategy : SMA1=42 & SMA2=252
Fixed Costs: 0.0
Proportional Costs: 0.0
=======================================================

2011-01-14 | buying 200 units at 49.78
2011-01-14 | current balance: 43.44
2011-01-14 | current net wealth: 10000.00
2012-12-21 | selling 200 units at 74.19
2012-12-21 | current balance: 14881.42
2012-12-21 | current net wealth: 14881.42
2013-10-11 | buying 211 units at 70.40
2013-10-11 | current balance: 26.68
2013-10-11 | current net wealth: 14881.42
2015-09-11 | selling 211 units at 114.21
2015-09-11 | current balance: 24124.99
2015-09-11 | current net wealth: 24124.99
2016-09-13 | buying 223 units at 107.95
2016-09-13 | current balance: 52.14
2016-09-13 | current net wealth: 24124.99
2018-12-24 | selling 223 units at 146.83
2018-12-24 | current balance: 32795.23
2018-12-24 | current net wealth: 32795.23
2019-04-29 | buying 160 units at 204.61
2019-04-29 | current balance: 57.63
2019-04-29 | current net wealth: 32795.23
2019-07-08 | selling 160 units at 200.02
2019-07-08 | current balance: 32060.83
2019-07-08 | current net wealth: 32060.83
2019-07-17 | buying 157 units at 203.35
2019-07-17 | current balance: 134.88
2019-07-17 | current net wealth: 32060.83
2019-12-31 | inventory 0 units at 293.65
=======================================================
Final Balance:		[$] 46237.93
Net Performance:	[%] 362.38
Trades Executed:	[#] 10.00
=======================================================
#+end_src

* Long-Short Backtesting Class

#+begin_src python
class BacktestLongShort(BacktestBase):

    def go_long(self, bar, units=None, amount=None):
        if self.position == -1:
            self.place_buy_order(bar, units=-self.units)
        if units:
            self.place_buy_order(bar, units=units)
        elif amount:
            if amount == 'all':
                amount = self.amount
            self.place_buy_order(bar, amount=amount)

    def go_short(self, bar, units=None, amount=None):
        if self.position == 1:
            self.place_sell_order(bar, units=self.units)
        if units:
            self.place_sell_order(bar, units=units)
        elif amount:
            if amount == 'all':
                amount = self.amount
            self.place_sell_order(bar, amount=amount)

    def run_sma_strategy(self, SMA1, SMA2):
        msg = f'\n\nRunning SMA strategy | SMA1={SMA1} & SMA2={SMA2}'
        msg += f'\nfixed costs {self.ftc} | '
        msg += f'proportional costs {self.ptc}'
        print(msg)
        print('=' * 55)
        self.position = 0  # initial neutral position
        self.trades = 0  # no trades yet
        self.amount = self.initial_amount  # reset initial capital
        self.data['SMA1'] = self.data['price'].rolling(SMA1).mean()
        self.data['SMA2'] = self.data['price'].rolling(SMA2).mean()

        for bar in range(SMA2, len(self.data)):
            if self.position in [0, -1]:
                if self.data['SMA1'].iloc[bar] > self.data['SMA2'].iloc[bar]:
                    self.go_long(bar, amount='all')
                    self.position = 1  # long position
            if self.position in [0, 1]:
                if self.data['SMA1'].iloc[bar] < self.data['SMA2'].iloc[bar]:
                    self.go_short(bar, amount='all')
                    self.position = -1  # short position
        self.close_out(bar)

    def run_momentum_strategy(self, momentum):
        msg = f'\n\nRunning momentum strategy | {momentum} days'
        msg += f'\nfixed costs {self.ftc} | '
        msg += f'proportional costs {self.ptc}'
        print(msg)
        print('=' * 55)
        self.position = 0  # initial neutral position
        self.trades = 0  # no trades yet
        self.amount = self.initial_amount  # reset initial capital
        self.data['momentum'] = self.data['return'].rolling(momentum).mean()
        for bar in range(momentum, len(self.data)):
            if self.position in [0, -1]:
                if self.data['momentum'].iloc[bar] > 0:
                    self.go_long(bar, amount='all')
                    self.position = 1  # long position
            if self.position in [0, 1]:
                if self.data['momentum'].iloc[bar] <= 0:
                    self.go_short(bar, amount='all')
                    self.position = -1  # short position
        self.close_out(bar)

    def run_mean_reversion_strategy(self, SMA, threshold):
        msg = f'\n\nRunning mean reversion strategy | '
        msg += f'SMA={SMA} & thr={threshold}'
        msg += f'\nfixed costs {self.ftc} | '
        msg += f'proportional costs {self.ptc}'
        print(msg)
        print('=' * 55)
        self.position = 0  # initial neutral position
        self.trades = 0  # no trades yet
        self.amount = self.initial_amount  # reset initial capital

        self.data['SMA'] = self.data['price'].rolling(SMA).mean()

        for bar in range(SMA, len(self.data)):
            if self.position == 0:
                if (self.data['price'].iloc[bar] <
                        self.data['SMA'].iloc[bar] - threshold):
                    self.go_long(bar, amount=self.initial_amount)
                    self.position = 1
                elif (self.data['price'].iloc[bar] >
                        self.data['SMA'].iloc[bar] + threshold):
                    self.go_short(bar, amount=self.initial_amount)
                    self.position = -1
            elif self.position == 1:
                if self.data['price'].iloc[bar] >= self.data['SMA'].iloc[bar]:
                    self.place_sell_order(bar, units=self.units)
                    self.position = 0
            elif self.position == -1:
                if self.data['price'].iloc[bar] <= self.data['SMA'].iloc[bar]:
                    self.place_buy_order(bar, units=-self.units)
                    self.position = 0
        self.close_out(bar)
#+end_src

#+begin_src python
def run_strategies():
    lsbt.run_sma_strategy(42, 252)
    lsbt.run_momentum_strategy(60)
    lsbt.run_mean_reversion_strategy(50, 5)

lsbt = BacktestLongShort('AAPL.O', '2010-1-1', '2019-12-31', 10000,
                         verbose=False)

run_strategies()

# transaction costs: 10 USD fix, 1% variable
lsbt = BacktestLongShort('AAPL.O', '2010-1-1', '2019-12-31',
                         10000, 10.0, 0.01, False)

run_strategies()
#+end_src
