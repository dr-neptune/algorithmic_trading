#+TITLE: Chapter 5: Predicting Market Movements with Machine Learning

This chapter covers the following types of trading strategies:

- linear regression based strategies
- ML based strategies (see above?)
- Deep-learning based strategies

* Using Linear Regression for Market Movement Prediction

** A Quick Overview of Linear Regression

#+begin_src python
import os
import random
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('tkAgg')

x = np.linspace(0, 10)  # gen evenly spaced grid of floats

# set random seed for rng
def set_seeds(seed=8888):
    random.seed(seed)
    np.random.seed(seed)
    print('ok')

set_seeds()

# generate random data for y values
y = x + np.random.standard_normal(len(x))

# fit an ols regression of degree 1
reg = np.polyfit(x, y, deg=1)
reg

# plot it
plt.figure()
plt.plot(x, y, 'bo', label='data')
plt.plot(x, np.polyval(reg, x), 'r', lw=2.5, label='linear regression')
plt.legend(loc=0)
plt.show()
#+end_src

* The Basic Idea for Price Prediction

Price prediction based on time series data has to deal with the time
index.

#+begin_src python
x = np.arange(12)
x

lags = 3
m = np.zeros((lags + 1, len(x) - lags))

m[lags] = x[lags:]  # target variable y

for i in range(lags):          # iterate over 0 -> lags - 1
    m[i] = x[i:i - lags]       # defines the basis vectors

m.T

reg = np.linalg.lstsq(m[:lags].T, m[lags], rcond=None)[0]  # implement OLS
reg  # print out the optimal parameters

np.dot(m[:lags].T, reg)  # dot product reveals prediction results
#+end_src


* Predicting Index Levels

#+begin_src python
import pandas as pd

# retrieve EOD data
raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                  index_col=0, parse_dates=True).dropna()

raw.info()

symbol = 'EUR='

df = pd.DataFrame(raw[symbol]).rename(columns={symbol: 'price'})

lags = 5

cols = []
for lag in range(1, lags + 1):
    col = f'lag_{lag}'
    df[col] = df['price'].shift(lag)
    cols.append(col)
df = df.dropna()

reg = np.linalg.lstsq(df[cols], df['price'], rcond=None)[0]

reg

df['prediction'] = np.dot(df[cols], reg)
df[['price', 'prediction']].loc['2019-10-1':].plot()
plt.show()
#+end_src

We see that today's rate is roughly yesterdays rate, i.e. a shift to
the right by 1 trading day.

* Predicting Future Returns

log returns may be better than absolute rate levels due to, for
example, their characteristic of making the time series data
stationary.

#+begin_src python
df['return'] = np.log(df['price'] / df['price'].shift(1)).dropna()

cols = []
for lag in range(1, lags + 1):
    col = f'lag_{lag}'
    df[col] = df['price'].shift(lag)
    cols.append(col)
df = df.dropna()

reg = np.linalg.lstsq(df[cols], df['return'], rcond=None)[0]

reg

df['prediction'] = np.dot(df[cols], reg)
df[['return', 'prediction']].loc['2019-10-1':].plot()
plt.show()
#+end_src

From a trading pov, one might argue that it is not the magnitude of
the forecasted return that is relevant, but rather whether the
direction is forecasted correctly or not.

#+begin_src python
hits = np.sign(df['return'] * df['prediction']).value_counts()
hits

hits.values[0] / sum(hits)  # 0.5067
#+end_src

not great, pretty much exactly 50/50

* Predicting Future Market Direction

Can we improve the hit ratio by directly implementing the linear
regression based on the sign of the log returns that serve as the
dependendant variables?


#+begin_src python
reg = np.linalg.lstsq(df[cols], np.sign(df['return']), rcond=None)[0]

df['prediction'] = np.sign(np.dot(df[cols], reg))
df['prediction'].value_counts()

hits = np.sign(df['return'] * df['prediction']).value_counts()
hits

hits.values[0] / sum(hits)  # 0.50997
#+end_src

a 0.03% increase

* Vectorized Backtesting of Regression-Based Strategy

The hit ratio alone doesn't tell us too much about the economic
potential of a trading strategy using linear regression in the way
presented so far. It is well known that the 10 worst and best days in
the markets for a given period of time considerably influence the
overall performance of investments. In an ideal world, a long-short
trader would try to benefit from both the best and worst days by going
short and long, respectively, on the basis of appropriate market
timing indicators.

This implies that, in addition to the hit ratio, the quality of market
timing matters.

#+begin_src python
df['strategy'] = df['prediction'] * df['return']

df[['return', 'strategy']].dropna().cumsum().apply(np.exp).dropna().plot()
plt.show()
#+end_src

* Generalizing the Approach

#+begin_src python
class LRVectorBacktester:
    """
    Class for the vectorized backtesting of linear regression-based
    trading strategies.

    Attributes
    ==========
    symbol: str
        TR RIC (financial instrument) to work with
    start: str
        start date for data selection
    end: str
        end date for data selection
    amount: int, float
        amount to be invested at the beginning
    tc: float
        proportional transaction costs (e.g., 0.5% = 0.005) per trade
    Methods
    =======
    get_data:
        retrieves and prepares the base data set
    select_data:
        selects a sub-set of the data
    prepare_lags:
        prepares the lagged data for the regression
    fit_model:
        implements the regression step
    run_strategy:
        runs the backtest for the regression-based strategy
    plot_results:
        plots the performance of the strategy compared to the symbol
    """
    def __init__(self, symbol, start, end, amount, tc):
        self.symbol = symbol
        self.start = start
        self.end = end
        self.amount = amount
        self.tc = tc
        self.results = None
        self.get_data()

    def get_data(self):
        raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                          index_col=0, parse_dates=True).dropna()
        raw = pd.DataFrame(raw[self.symbol])
        raw = raw.loc[self.start:self.end].rename(columns={self.symbol: 'price'})
        raw['returns'] = np.log(raw / raw.shift(1))
        self.data = raw.dropna()

    def select_data(self, start, end):
        """selects subsets of the financial data"""
        data = self.data[(self.data.index >= start) &
                         (self.data.index <= end)]
        return data

    def prepare_lags(self, start, end):
        """Prepares the lagged data for the regression and prediction steps"""
        data = self.select_data(start, end)
        self.cols = []
        for lag in range(1, self.lags + 1):
            col = f'lag_{lag}'
            data[col] = data['returns'].shift(lag)
            self.cols.append(col)
        data = data.dropna()
        self.lagged_data = data

    def fit_model(self, start, end):
        self.prepare_lags(start, end)
        reg = np.linalg.lstsq(self.lagged_data[self.cols],
                              np.sign(self.lagged_data['returns']),
                              rcond=None)[0]
        self.reg = reg

    def run_strategy(self, start_in, end_in, start_out, end_out, lags=3):
        """backtests the trading strategy"""
        self.lags = lags
        self.fit_model(start_in, end_in)
        self.results = self.select_data(start_out, end_out).iloc[lags:]
        self.prepare_lags(start_out, end_out)
        prediction = np.sign(np.dot(self.lagged_data[self.cols], self.reg))
        self.results['prediction'] = prediction
        self.results['strategy'] = self.results['prediction'] * self.results['returns']

        # determine when a trade takes place
        trades = self.results['prediction'].diff().fillna(0) != 0

        # subtract transaction costs from return when trade takes place
        self.results['strategy'][trades] -= self.tc
        self.results['creturns'] = (self.amount *
                                    self.results['returns']
                                    .cumsum()
                                    .apply(np.exp))
        self.results['cstrategy'] = (self.amount *
                                     self.results['strategy']
                                     .cumsum()
                                     .apply(np.exp))

        # gross performance of the strategy
        aperf = self.results['cstrategy'].iloc[-1]
        operf = aperf - self.results['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)

    def plot_results(self):
        """plots the cumulative performance of the trading strategy compared to the symbol"""
        if self.results is None:
            print('No results to plot yet. Run a strategy')
        title = '%s | TC = %.4f' % (self.symbol, self.tc)
        self.results[['creturns', 'cstrategy']].plot(title=title)
        plt.show()
#+end_src

#+begin_src python
lrbt = LRVectorBacktester('EUR=', '2010-1-1', '2019-12-31', 10000, 0.0)
lrbt.run_strategy('2010-1-1', '2019-12-31', '2010-1-1', '2019-12-31', lags=5)
lrbt.plot_results()
lrbt.run_strategy('2010-1-1', '2017-12-31', '2018-1-1', '2019-12-31', lags=5)
lrbt.plot_results()
#+end_src

* Using Machine Learning for Market Movement Prediction

** Linear Regression with scikit-learn

#+begin_src python
from sklearn import linear_model

x = np.arange(12)
lags = 3
m = np.zeros((lags + 1, len(x) - lags))

# make a lattice
m[lags] = x[lags:]
for i in range(lags):
    m[i] = x[i:i - lags]

lm = linear_model.LinearRegression()
lm.fit(m[:lags].T, m[lags])

lm.coef_
lm.intercept_

lm.predict(m[:lags].T)
#+end_src

** A Simple Classification Problem

#+begin_src python
hours = np.array([0.5, 0.75, 1., 1.25, 1.5, 1.75, 1.75, 2.,
                  2.25, 2.5, 2.75, 3., 3.25, 3.5, 4., 4.25,
                  4.5, 4.75, 5., 5.5])

success = np.array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,
                    0, 1, 1, 1, 1, 1, 1])

# fit logistic regression
lm = linear_model.LogisticRegression(solver='lbfgs')
hrs = hours.reshape(1, -1).T
lm.fit(hrs, success)
prediction = lm.predict(hrs)

# probabilities for 0 and 1
prob = lm.predict_proba(hrs)

plt.figure()
plt.plot(hours, success, 'ro', label='data')
plt.plot(hours, prediction, 'b', label='prediction')
plt.plot(hours, prob.T[0], 'm--', label='$p(h)$ for 0')
plt.plot(hours, prob.T[1], 'g-.', label='$p(h)$ for 1')
plt.ylim(-0.2, 1.2)
plt.show()
#+end_src

* Using Logistic Regression to Predict Market Direction

#+begin_src python
# get data
symbol = 'GLD'
df = pd.DataFrame(raw[symbol]).rename(columns={symbol: 'price'})

# get returns
df['return'] = np.log(df['price'] / df['price'].shift(1)).dropna()

# make logreg with lags as features
lags = 5

cols = []
for lag in range(1, lags + 1):
    col = f'lag_{lag}'
    df[col] = df['return'].shift(lag)
    cols.append(col)

df = df.dropna()

from sklearn.metrics import accuracy_score

# fit model
lm = linear_model.LogisticRegression(C=1e7, solver='lbfgs',
                                     multi_class='auto',
                                     max_iter=1000)

lm.fit(df[cols], np.sign(df['return']))

df['prediction'] = lm.predict(df[cols])
df['prediction'].value_counts()

# get overview of results
hits = (np.sign(df['return'].iloc[lags:] *
                df['prediction'].iloc[lags:])
        .value_counts())

hits

accuracy_score(df['prediction'], np.sign(df['return']))

# show regular returns vs. strategy
df['strategy'] = df['prediction'] * df['return']
df[['return', 'strategy']].cumsum().apply(np.exp).plot()
plt.show()
#+end_src

* Generalizing the Approach

#+begin_src python
class ScikitVectorBacktester:
    """
    Class for the vectorized backtesting of machine learning based strategies

    Attributes
    ==========
    symbol: str
        TR RIC (financial instrument) to work with
    start: str
        start date for data selection
    end: str
        end date for data selection
    amount: int, float
        amount to be invested at the beginning
    tc: float
        proportional transaction costs (e.g., 0.5% = 0.005) per trade
    model: str
        either 'regression' or 'logistic'

    Methods
    =======
    get_data:
        retrieves and prepares the base data set
    select_data:
        selects a sub-set of the data
    prepare_features:
        prepares the features data for the model fitting
    fit_model:
        implements the fitting step
    run_strategy:
        runs the backtest for the regression-based strategy
    plot_results:
        plots the performance of the strategy compared to the symbol
    """
    def __init__(self, symbol, start, end, amount, tc, model):
        self.symbol = symbol
        self.start = start
        self.end = end
        self.amount = amount
        self.tc = tc
        self.results = None

        if model == 'regression':
            self.model = linear_model.LogisticRegression()
        elif model == 'logistic':
            self.model = linear_model.LogisticRegression(C=1e6, solver='lbfgs', multi_class='ovr', max_iter=1000)
        else:
            raise ValueError('Model not known or not yet implemented')

        self.get_data()

    def get_data(self):
        """retrieves and prepares data"""
        raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                          index_col=0, parse_dates=True).dropna()
        raw = pd.DataFrame(raw[self.symbol])
        raw = raw.loc[self.start:self.end].rename(columns={self.symbol: 'price'})
        raw['returns'] = np.log(raw / raw.shift(1))
        self.data = raw.dropna()

    def select_data(self, start, end):
        """selects sub-sets of the financial data"""
        data = self.data[(self.data.index >= start) &
                         (self.data.index <= end)].copy()
        return data

    def prepare_features(self, start, end):
        """prepares the feature columns for the regression and prediction steps"""
        self.data_subset = self.select_data(start, end)
        self.feature_columns = []
        for lag in range(1, self.lags + 1):
            col = f'lag_{lag}'
            self.data_subset[col] = self.data_subset['returns'].shift(lag)
            self.feature_columns.append(col)
        self.data_subset = self.data_subset.dropna()

    def fit_model(self, start, end):
        """implements the fitting step"""
        self.prepare_features(start, end)
        self.model.fit(self.data_subset[self.feature_columns],
                       np.sign(self.data_subset['returns']))

    def run_strategy(self, start_in, end_in, start_out, end_out, lags=3):
        """backtests the trading strategy"""
        self.lags = lags
        self.fit_model(start_in, end_in)
        self.prepare_features(start_out, end_out)

        prediction = self.model.predict(self.data_subset[self.feature_columns])
        self.data_subset['prediction'] = prediction
        self.data_subset['strategy'] = (self.data_subset['prediction'] * self.data_subset['returns'])

        # determine when a trade takes place
        trades = self.data_subset['prediction'].diff().fillna(0) != 0

        # subtract transaction costs from return when trade takes place
        self.data_subset['strategy'][trades] -= self.tc
        self.data_subset['creturns'] = (self.amount * self.data_subset['returns'].cumsum().apply(np.exp))
        self.data_subset['cstrategy'] = (self.amount * self.data_subset['strategy'].cumsum().apply(np.exp))
        self.results = self.data_subset

        # absolute performance of the strategy
        aperf = self.results['cstrategy'].iloc[-1]
        # out/underperformance of the strategy
        operf = aperf - self.results['creturns'].iloc[-1]

        return round(aperf, 2), round(operf, 2)

    def plot_results(self):
        """plots the cumulative performance of the trading strategy compared to the symbol"""
        if self.results is None:
            print('No results to plot yet. Run a strategy')
        title = f'{self.symbol} | TC = {self.tc:.4f}'
        self.results[['creturns', 'cstrategy']].plot(title=title)
        plt.show()
#+end_src

#+begin_src python
scibt = ScikitVectorBacktester('EUR=', '2010-1-1', '2019-12-31', 10000, 0.0, 'logistic')
scibt.run_strategy(*['2015-1-1', '2019-12-31']*2, lags=15)
scibt.plot_results()

scibt.run_strategy(*['2016-1-1', '2018-12-31']*2, lags=15)
scibt.plot_results()
#+end_src

* Using Deep Learning for Market Movement Prediction

** Simple Classification Problem Revisited

#+begin_src python
data = pd.DataFrame({'hours': hours, 'success': success})

from sklearn.neural_network import MLPClassifier

model = MLPClassifier(hidden_layer_sizes=[32],
                      max_iter=1000, random_state=100)

model.fit(data['hours'].values.reshape(-1, 1), data['success'])

data['prediction'] = model.predict(data['hours'].values.reshape(-1, 1))

data.tail()

data.plot(x='hours', y=['success', 'prediction'], style=['ro', 'b-'], ylim=[-.1, 1.1])
plt.show()
#+end_src

** Using Deep Neural Networks to Predict Market Direction

#+begin_src python
# prepare data
symbol = 'EUR='
data = pd.DataFrame(raw[symbol]).rename(columns={symbol: 'price'})
data['return'] = np.log(data['price'] / data['price'].shift(1))
data['direction'] = np.where(data['return'] > 0, 1, 0)

lags = 5

cols = []
for lag in range(1, lags + 1):
    col = f'lag_{lag}'
    data[col] = data['return'].shift(lag)
    cols.append(col)
data = data.dropna()

data.round(4).tail()

# fit model
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras.optimizers import Adam, RMSprop

def set_seeds(seed=100):
    random.seed(seed)
    np.random.seed(seed)
    tf.random.set_seed(100)

set_seeds()

model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(lags,)))
model.add(Dense(64, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

cutoff = '2017-12-31'

training_data = data[data.index < cutoff].copy()
mu, std = training_data.mean(), training_data.std()
training_data_ = (training_data - mu) / std  # normalize
test_data = data[data.index >= cutoff].copy()
test_data_ = (test_data - mu) / std

model.fit(training_data[cols],
          training_data['direction'],
          epochs=50,
          verbose=False,
          validation_split=0.2,
          shuffle=False)

res = pd.DataFrame(model.history.history)

res[['accuracy', 'val_accuracy']].plot(style='--')
plt.show()

model.evaluate(training_data_[cols], training_data['direction'])

pred = np.where(model.predict(training_data_[cols]) > 0.5, 1, 0)

training_data['prediction'] = np.where(pred > 0, 1, -1)
training_data['strategy'] = (training_data['prediction'] * training_data['return'])

training_data[['return', 'strategy']].cumsum().apply(np.exp).plot()
plt.show()

# test set
model.evaluate(test_data_[cols], test_data['direction'])

pred = np.where(model.predict(test_data_[cols]) > 0.5, 1, 0)

test_data['prediction'] = np.where(pred > 0, 1, -1)
test_data['strategy'] = (test_data['prediction'] * test_data['return'])

test_data[['return', 'strategy']].cumsum().apply(np.exp).plot()
plt.show()
#+end_src

So far the analysis mainly focuses on the log returns directly. We can
also add other types of features to the mix, such as ones based on
momentum, volatility, or distance measures.

** Adding Different Types of Features

#+begin_src python
# add features
data['momentum'] = data['return'].rolling(5).mean().shift(1)
data['volatility'] = data['return'].rolling(20).std().shift(1)
data['distance'] = (data['price'] - data['price'].rolling(50).mean()).shift(1)
data = data.dropna()

cols.extend(['momentum', 'volatility', 'distance'])

# make training and test sets
training_data = data[data.index < cutoff].copy()
mu, std = training_data.mean(), training_data.std()
training_data_ = (training_data - mu) / std
test_data = data[data.index >= cutoff].copy()
test_data_ = (test_data - mu) / std

# make model
# set_seeds()
model = Sequential()
model.add(Dense(32, activation='relu', input_shape=(len(cols),)))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])
model.fit(training_data_[cols], training_data['direction'], verbose=False, epochs=25)
model.evaluate(training_data_[cols], training_data['direction'])

pred = np.where(model.predict(training_data_[cols]) > 0.5, 1, 0)
training_data['prediction'] = np.where(pred > 0, 1, -1)
training_data['strategy'] = (training_data['prediction'] * training_data['return'])

training_data[['return', 'strategy']].cumsum().apply(np.exp).plot()
plt.show()

# test data
model.evaluate(test_data_[cols], test_data['direction'])

pred = np.where(model.predict(test_data_[cols]) > 0.5, 1, 0)
test_data['prediction'] = np.where(pred > 0, 1, -1)
test_data['strategy'] = (test_data['prediction'] * test_data['return'])

test_data[['return', 'strategy']].cumsum().apply(np.exp).plot()
plt.show()
#+end_src
