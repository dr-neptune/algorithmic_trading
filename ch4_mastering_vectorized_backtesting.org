#+TITLE: Chapter 4: Mastering Vectorized Backtesting

This chapter covers backtesting of the following 3 strategies:

1. Simple Moving Averages (SMA) based strategies
2. Momentum Strategies
3. Mean-Reversion Strategies

* Vectorization with Numpy

#+begin_src python
# simple arrays
import numpy as np

v = [1, 2, 3, 4, 5]
a = np.array(v)

type(a)

2 * a

0.5 * a + 2

# 2D array
a = np.arange(12).reshape((4, 3))
2 * a
a ** 2

# summary statistics
a.mean()
np.mean(a)
np.mean(a, axis=0)
np.mean(a, axis=1)
#+end_src

* Vectorization with Pandas

#+begin_src python
import pandas as pd

a = np.arange(15).reshape(5, 3)

cols = list('abc')
idx = pd.date_range('2022-09-16', periods=5, freq='B')
df = pd.DataFrame(a, columns=cols, index=idx)
#+end_src

In principle, vectorization now works similarly to ndarray
objects. One difference is that aggregation operations default to
column-wise results.

#+begin_src python
2 * df
df.sum()
np.mean(df)
#+end_src

Column-wise operations can be implemented by referencing the
respective column names, either by the bracket notation or the dot
notation:

#+begin_src python
df['a'] + df['c']

0.5 * df.a + 2 * df.b - df.c
#+end_src

* Strategies Based on Simple Moving Averages

** Getting into the Basics

#+begin_src python
raw = pd.read_csv('http://hilpisch.com/pyalgo_eikon_eod_data.csv',
                  index_col=0, parse_dates=True).dropna()

df = pd.DataFrame(raw['EUR=']).rename(columns={'EUR=': 'price'})

# calc SMAs
df['SMA1'] = df['price'].rolling(42).mean()
df['SMA2'] = df['price'].rolling(252).mean()

# visualize
import matplotlib
matplotlib.use('tkAgg')
import matplotlib.pyplot as plt

df.plot(title='EUR/USD | 42 & 252 day SMAs')
plt.show()
#+end_src

The rule is to *go long whenever the shorter SMA is above the longer
one and vice versa*.

Returns:

#+begin_src python
# get log returns of the strategy given position and market returns
df['strategy'] = df['position'].shift(1) * df['returns']

# get sum of returns and apply exp transform to calculate gross performance
srets = df[['returns', 'strategy']]

srets.sum().apply(np.exp)

# gross performance of EUR/USD compared to the SMA-based strategy
srets.cumsum().apply(np.exp).plot()
plt.show()
#+end_src

Risk Statistics:

#+begin_src python
# get risk statistics
annualized_mean_return_log = srets.mean() * 252

annualized_mean_return = np.exp(annualized_mean_return_log)

# standard deviation
std_dev_log = srets.std() * 252 ** 0.5
std_dev_return = (srets.apply(np.exp) - 1).std() * 252 ** 0.5
#+end_src

Other useful helper statistics are /maximum drawdown/ and the /longest
drawdown period/:

#+begin_src python
df['cumret'] = df['strategy'].cumsum().apply(np.exp)  # gross performance over time
df['cummax'] = df['cumret'].cummax()                  # running max value of gross performance

# gross performance and cumulative maximum performance of the SMA-based strategy
df[['cumret', 'cummax']].dropna().plot()
plt.show()

# max drawdown
drawdown = df['cummax'] - df['cumret']
drawdown.max()

# longest drawdown period
dt_idx = lambda srs: srs.reset_index().astype({'Date': 'datetime64[ns]'})['Date']

periods = (dt_idx(drawdown[drawdown == 0][1:]) -
           dt_idx(drawdown[drawdown == 0][:-1]))

periods.max()  # 1563 days, or ~4.3 years; oof
#+end_src

** Generalizing the Approach

#+begin_src python
import numpy as np
import pandas as pd
from scipy.optimize import brute

class SMAVectorBacktester():
    """
    Vectorized Backtesting of SMA-based trading strategies

    Attributes
    ==========
    symbol: str
        RIC symbol with which to work
    SMA1: int
        time window in days for shorter SMA
    SMA2: int
        time window in days for longer SMA
    start: str
        start date for data retrieval
    end: str
        end date for data retrieval

    Methods
    =======
    get_data:
        retrieves and prepares the base data set
    set_parameters:
        sets one or two new SMA parameters
    run_strategy:
        runs the backtest for the SMA-based strategy
    plot_results:
        plots the performance of the strategy compared to the symbol
    update_and_run:
        updates SMA parameters and returns the (negative) absolute performance
    optimize_parameters:
        implements a brute force optimization for the two SMA parameters
    """
    def __init__(self, symbol, SMA1, SMA2, start, end):
        self.symbol = symbol
        self.SMA1 = SMA1
        self.SMA2 = SMA2
        self.start = start
        self.end = end
        self.results = None
        self.get_data()

    def get_data(self):
        """get data and preprocess it"""
        raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                          index_col=0, parse_dates=True).dropna()
        raw = pd.DataFrame(raw[self.symbol])
        raw = raw.loc[self.start:self.end]
        raw = raw.rename(columns=[self.symbol: 'price'])

        raw['return'] = np.log(raw / raw.shift(1))
        raw['SMA1'] = raw['price'].rolling(self.SMA1).mean()
        raw['SMA2'] = raw['price'].rolling(self.SMA2).mean()
        self.data = raw

    def set_parameters(self, SMA1=None, SMA2=None):
        """update SMA params and respective time series"""
        if SMA1 is not None:
            self.SMA1 = SMA1
            self.data['SMA1'] = self.data['price'].rolling(self.SMA1).mean()
        if SMA2 is not None:
            self.SMA2 = SMA2
            self.data['SMA2'] = self.data['price'].rolling(self.SMA2).mean()

    def run_strategy(self):
        """backtest the trading strategy"""
        df = self.data.copy().dropna()
        df['position'] = np.where(df['SMA1'] > df['SMA2'], 1, -1)
        df['strategy'] = df['position'].shift(1) * df['return']
        df = df.dropna()
        df['creturns'] = df['return'].cumsum().apply(np.exp)
        df['cstrategy'] = df['strategy'].cumsum().apply(np.exp)
        self.results = df
        # gross performance
        aperf = df['cstrategy'].iloc[-1]
        # out/underperformance of strategy
        operf = aperf - df['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)

    def plot_results(self):
        """plot the cumulative performance of the trading strategy compared to the symbol"""
        if self.results is None:
            print("No results to plot yet. Run a strategy")
        title = '%s | SMA1 = %d, SMA2 = %d' % (self.symbol,
                                               self.SMA1,
                                               self.SMA2)
        self.results[['creturns', 'cstrategy']].plot(title=title)
        plt.show()

    def update_and_run(self, SMA):
        """update SMA params and returns negative absolute performance (for minimization algo)"""
        self.set_parameters(int(SMA[0]), int(SMA[1]))
        return -self.run_strategy()[0]

    def optimize_parameters(self, SMA1_range, SMA2_range):
        """finds global maximum given the SMA parameter ranges"""
        opt = brute(self.update_and_run, (SMA1_range, SMA2_range), finish=None)
        return opt, -self.update_and_run(opt)
#+end_src


#+begin_src python
smabt = SMAVectorBacktester('EUR=', 42, 252, '2010-1-1', '2020-12-31')
print(smabt.run_strategy())  # (1.29, 0.45)
#+end_src

Gross performance of the strategy with SMA1=42, SMA2=252 is 1.29, or
129%.

#+begin_src python
print(smabt.optimize_parameters((30, 56, 4), (200, 300, 4)))

smabt.plot_results()
#+end_src

The optimized strategy yields an absolute return of 149% for
the parameter combination SMA1=50, SMA2=236.

#+begin_src python
SMAVectorBacktester("EUR=", 50, 236, "2010-1-1", "2020-12-31").run_strategy()
#+end_src

* Strategies Based on Momentum

There are 2 basic types of momentum strategies.

The first type is *cross-sectional* momentum stragies. Selecting from a
larger pool of instruments, these strategies buy those instruments
that have recently outperformed relative to their peers (or a
benchmark) and sell those instruments that have underperformed.

The second type is *time-series* momentum strategies. These strategies
buy those instruments that have recently performed well and sell those
instruments that have recently performed poorly. In this case, the
benchmark is the past returns of the instrument itself.

** Getting into the Basics

simplest momentum strategy: buy the stock if the last return was
positive and sell it if it was negative

#+begin_src python
df['position'] = np.sign(df['returns'])
df['strategy'] = df['position'].shift(1) * df['returns']

# this strategy strongly underperforms
df[['returns', 'strategy']].dropna().cumsum().apply(np.exp).plot()
plt.show()
#+end_src

We can use the mean of the last $n$ returns to generalize a bit:

#+begin_src python
# using the last n returns
df['position'] = np.sign(df['returns'].rolling(3).mean())
df['strategy'] = df['position'].shift(1) * df['returns']

# works, but is sensitive to the rolling window
df[['returns', 'strategy']].dropna().cumsum().apply(np.exp).plot()
plt.show()
#+end_src

Time series momentum might be expected intraday as well

#+begin_src python
fn = 'data/AAPL_1min_05052020.csv'
df = pd.read_csv(fn, index_col=0, parse_dates=True)

df['returns'] = np.log(df['CLOSE'] / df['CLOSE'].shift(1))

to_plot = ['returns']

for m in [1, 3, 5, 7, 9]:
    df['position_%d' % m] = np.sign(df['returns']).rolling(m).mean()
    df['strategy_%d' % m] = df['position_%d' % m].shift(1) * df['returns']
    to_plot.append('strategy_%d' % m)

df[to_plot].dropna().cumsum().apply(np.exp).plot(title='AAPL Intraday 05May2020',
                                                 style=['-', '--', '--', '--', '--', '--'])
plt.show()
#+end_src

** Generalizing the Approach

#+begin_src python
import numpy as np
import pandas as pd


class MomVectorBacktester:
    """
    Vectorized backtesting of momentum-based strategies.

    Attributes
    ==========
    symbol: str
        RIC (financial instrument) to work with
    start: str
        start date for data selection
    end: str
        end date for data selection
    amount: int, float
        amount to be invested at the beginning
    tc: float
        proportional transaction costs (e.g., 0.5% = 0.005) per trade
    Methods
    =======
    get_data:
        retrieves and prepares the base data set
    run_strategy:
        runs the backtest for the momentum-based strategy
    plot_results:
        plots the performance of the strategy compared to the symbol
    """
    def __init__(self, symbol, start, end, amount, tc):
        self.symbol = symbol
        self.start = start
        self.end = end
        self.amount = amount
        self.tc = tc
        self.results = None
        self.get_data()

    def get_data(self):
        """retrieve and prepare data"""
        raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                          index_col=0, parse_dates=True).dropna()
        raw = pd.DataFrame(raw[self.symbol])
        raw = raw.loc[self.start:self.end]
        raw = raw.rename(columns={self.symbol: 'price'})
        raw['return'] = np.log(raw / raw.shift(1))
        self.data = raw

    def run_strategy(self, momentum=1):
        """backtests the trading strategy"""
        self.momentum = momentum
        df = self.data.copy().dropna()
        df['position'] = np.sign(df['return'].rolling(momentum).mean())
        df['strategy'] = df['position'].shift(1) * df['return']

        # determine when a trade takes place
        df = df.dropna()
        trades = df['position'].diff().fillna(0) != 0
        df['strategy'][trades] -= self.tc
        df['creturns'] = self.amount * df['return'].cumsum().apply(np.exp)
        df['cstrategy'] = self.amount * df['strategy'].cumsum().apply(np.exp)
        self.results = df

        # absolute performance of the strategy
        aperf = self.results['cstrategy'].iloc[-1]
        operf = aperf - self.results['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)

    def plot_results(self):
        """plot the cumulative performance of the trading strategy compared to the symbol"""
        if self.results is None:
            print("No results to plot yet. Run a strategy")
        title = "%s | TC = %.4f" % (self.symbol, self.tc)
        self.results[['creturns', 'cstrategy']].plot(title=title)
        plt.show()
#+end_src

Compared with the =SMAVectorBacktester= class, this one introduces 2
important generalizations:

1. The fixed amount to be inveseted at the beginning of the
   backtesting period
2. Proportional transaction costs to get closer to market realities
   cost-wise

The addition of transaction costs is important in the context of time
series momentum strategies that often lead to a large number of
transactions over time.


#+begin_src python
mombt = MomVectorBacktester('XAU=', '2010-1-1', '2019-12-31', 10000, 0.0)
mombt.run_strategy(momentum=3)
mombt.plot_results()

mombt = MomVectorBacktester('XAU=', '2010-1-1', '2019-12-31', 10000, 0.001)
mombt.run_strategy(momentum=3)
mombt.plot_results()
#+end_src

These are finicky. Changing the dates or momentum a bit can lead to
outstanding losses or outstanding gains.

* Strategies Based on Mean Reversion

Roughly speaking, mean-reversion strategies rely on a reasoning that
is the opposite of momentum strategies. If a financial instrument has
performed "too well" relative to its trend, it is shorted, and vice
versa.

The idea is to define a threshold between the current stock price and
the SMA, which signals a long or short position.

** Getting into the Basics

The examples that follow are for 2 different financial instruments for
which one would expect mean reversion since they are based on the gold
price:

- =GLD= is the symbol for SPDR gold shares
- =GDX= is the symbol for the VanEck Vectors Gold Miners ETF

The example starts with GDX and implements a mean-reversion strategy
on the basis of an SMA of 25 days and a threshold value of 3.5 for the
absolute deviation of the current price to deviate from the SMA to
signal a positioning.

#+begin_src python
df = pd.DataFrame(raw['GDX']).rename(columns={'GDX': 'price'})
df['returns'] = np.log(df['price'] / df['price'].shift(1))

SMA = 25
threshold = 3.5

df['SMA'] = df['price'].rolling(SMA).mean()

df['distance'] = df['price'] - df['SMA']

df['distance'].dropna().plot()
plt.axhline(threshold, color='green')
plt.axhline(-threshold, color='green')
plt.axhline(0, color='purple')
plt.show()
#+end_src


Based on the differences and the fixed threshold values, positionings
can again be derived in vectorized fashion.

#+begin_src python
df['position'] = np.where(df['distance'] > threshold, -1, np.nan) # short
df['position'] = np.where(df['distance'] < -threshold, 1, df['position']) # long
# if there is a change in the sign of the distance value, go market neutral
# ow keep position unchanged
df['position'] = np.where(df['distance'] * df['distance'].shift(1) < 0, 0, df['position'])

# forward fill all NaN positions with the previous values
df['position'] = df['position'].ffill().fillna(0)

df['position'].iloc[SMA:].plot(ylim=[-1.1, 1.1])
plt.show()
#+end_src

The final step is to derive the strategy returns

#+begin_src python
df['strategy'] = df['position'].shift(1) * df['returns']
df[['returns', 'strategy']].dropna().cumsum().apply(np.exp).plot()
plt.show()
#+end_src

* Generalizing the Approach

#+begin_src python
class MRVectorBacktester(MomVectorBacktester):
    """
    Class for backtesting of mean reversion based trading strategies

    Attributes
    ==========
    symbol: str
        RIC symbol with which to work
    start: str
        start date for data retrieval
    end: str
        end date for data retrieval
    amount: int, float
        amount to be invested at the beginning
    tc: float
        proportional transaction costs (e.g., 0.5% = 0.005) per trade
    Methods
    =======
    get_data:
        retrieves and prepares the base data set
    run_strategy:
        runs the backtest for the mean reversion-based strategy
    plot_results:
        plots the performance of the strategy compared to the symbol
    """
    def run_strategy(self, SMA, threshold):
        """backtests the trading strategy"""
        df = self.data.copy().dropna()
        df['sma'] = df['price'].rolling(SMA).mean()
        df['distance'] = df['price'] - df['sma']
        df = df.dropna()

        # sell signals
        df['position'] = np.where(df['distance'] > threshold, -1, np.nan)          # sell
        df['position'] = np.where(df['distance'] < -threshold, 1, df['position'])  # buy
        # crossing of current price and SMA (zero distance)
        df['position'] = np.where(df['distance'] * df['distance'].shift(1) < 0,
                                  0, df['position'])
        df['position'] = df['position'].ffill().fillna(0)
        df['strategy'] = df['position'].shift(1) * df['return']

        # determine when a trade takes place
        trades = df['position'].diff().fillna(0) != 0

        # subtract transaction costs from return when trade takes place
        df['strategy'][trades] -= self.tc
        df['creturns'] = self.amount * df['return'].cumsum().apply(np.exp)
        df['cstrategy'] = self.amount * df['strategy'].cumsum().apply(np.exp)
        self.results = df
        aperf = self.results['cstrategy'].iloc[-1]
        operf = aperf - self.results['creturns'].iloc[-1]
        return round(aperf, 2), round(operf, 2)


mrbt = MRVectorBacktester('GDX', '2010-1-1', '2020-12-31', 10000, 0.0)
print(mrbt.run_strategy(SMA=25, threshold=5))

mrbt = MRVectorBacktester('GDX', '2010-1-1', '2020-12-31', 10000, 0.001)
print(mrbt.run_strategy(SMA=25, threshold=5))

mrbt = MRVectorBacktester('GDX', '2010-1-1', '2020-12-31', 10000, 0.001)
print(mrbt.run_strategy(SMA=42, threshold=7.5))

mrbt = MRVectorBacktester('GLD', '2010-1-1', '2019-12-31', 10000, 0.001)
print(mrbt.run_strategy(SMA=43, threshold=7.5))

mrbt.plot_results()
#+end_src

* Data Snooping and Overfitting

The ability to show examples with good results often comes at the cost
of /data snooping/, which can be defined as follows:

*Data snooping* occurs when a given set of data is used more than once
 for purposes of inference or model selection.
