#+TITLE: Ch 10: Automating Trading Operations

This chapter covers the following topics:

- the Kelly criterion
  - this helps with sizing trades
- backtesting
- transformation of offline algorithms into online algorithms
- infrastructure deployment
- logging and monitoring
- visual step by step overview

* Capital Management

The Kelly Criterion allows for an explicit calculation of the fraction
of the available capital a trader should deploy to a given strategy,
given its statistical return characteristics.

** Kelly Criterion in a Binomial Setting

We assume that a gambler is playing a coin tossing game against an
infinitely rich bank or casino. We assume further that the probability
for heads is some value $p$ for which the following holds:

$\frac{1}{2} < p < 1$

and for tails:

$q = 1 - p < \frac{1}{2}$

There is a derivation in the book that boils down to the optimal
fraction to invest per round of betting: $f^* = p - q$. For example,
with $p = 0.55$, then $f = 0.55 - 0.45 = 0.1$

#+begin_src python
import math
import time
import numpy as np
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('tkAgg')
np.random.seed(50)

# simulate 50 series with 100 coin tosses per series
p = 0.55                 # fix probability for heads
f = p - (1 - p)          # calculate optimal fraction
I = 50                   # number of series to calc
n = 100                  # number of trials per series

def run_simulation(f):
    c = np.zeros((n, I))                               # store results
    c[0] = 100                                         # start with 100
    for i in range(I):                                 # simulations
        for t in range(1, n):                          # build series
            o = np.random.binomial(1, p)               # toss a coin
            if o > 0:                                  # heads
                c[t, i] = (1 + f) * c[t - 1, i]        # add to win capital
            else:                                      # tails
                c[t, i] = (1 - f) * c[t - 1, i]        # subtract from win capital
    return c

c1 = run_simulation(f)
c1.round(2)


fig = plt.figure()
plt.plot(c1, 'b', lw=0.5)
plt.plot(c1.mean(axis=1), 'r', lw=2.5)
plt.show()

# try different values
c2 = run_simulation(0.05)
c3 = run_simulation(0.25)
c4 = run_simulation(0.5)

# average capital over time for different values of f
fig = plt.figure()
plt.plot(c1.mean(axis=1), 'r', label='$f^*=0.1$')
plt.plot(c2.mean(axis=1), 'b', label='$f^*=0.05$')
plt.plot(c3.mean(axis=1), 'y', label='$f^*=0.25$')
plt.plot(c4.mean(axis=1), 'm', label='$f^*=0.5$')
plt.legend(loc=0)
plt.show()
#+end_src

** Kelly Criterion for Stocks and Indices

Assume now a stock market setting in which the relevant stock (index)
can take on only 2 values after a period of one year from today, given
its known value today. Specifically, assume the following holds true:

$P(r^s = \mu + \sigma) = P(r^S = \mu - \sigma) = \frac{1}{2}$

where
- $E(r^S) = \mu > 0$ is the expected return of the stock over one year
- $\sigma > 0$ is the standard deviation of returns (volatility)

There is a derivation in the book that leads to the optimal fraction
$f^*$ being:

$f^* = \frac{\mu - r}{\sigma^2}$

Here is a real-world example: a passive long position in the S&P 500.

If we assume a risk-free rate of 0, then our Kelly fraction is ~4.6,
implying that for every dollar invested, 4.6 dollars shall be
invested. This implies leverage. All things being equal, the Kelly
criterion implies a higher leverage when the expected return is higher
and the volatility is lower.

#+begin_src python
raw = pd.read_csv('https://hilpisch.com/pyalgo_eikon_eod_data.csv',
                  index_col=0, parse_dates=True)

symbol = '.SPX'

data = pd.DataFrame(raw[symbol])
data['return'] = np.log(data / data.shift(1))
data = data.dropna()
data.tail()

mu = data['return'].mean() * 252
sigma = data['return'].std() * 252 ** 0.5
r = 0.0
f = (mu - r) / sigma ** 2
f
#+end_src

The following code simulates the application of the Kelly criterion
and the optimal leverage ratio. For simplicity, the initial equity is
set to 1 while the initially invested total capital is set to $1 \cdot
f^*$. Depending on the performance of the capital deployed to the
strategy, the total capital itself is adjusted daily according to the
available equity.

#+begin_src python
equs = []
def kelly_strategy(f):
    global equs
    equ = 'equity_{:.2f}'.format(f)
    equs.append(equ)
    cap = 'capital_{:.2f}'.format(f)
    data[equ] = 1
    data[cap] = data[equ] * f
    for i, t in enumerate(data.index[1:]):
        t_1 = data.index[i]
        data.loc[t, cap] = data[cap].loc[t_1] * \
          math.exp(data['return'].loc[t])
        data.loc[t, equ] = data[cap].loc[t] - \
          data[cap].loc[t_1] + \
          data[equ].loc[t_1]
        data.loc[t, cap] = data[equ].loc[t] * f

kelly_strategy(f * 0.5)
kelly_strategy(f * 0.55)
kelly_strategy(f)
print(data[equs].tail())

# gross performance of the S&P 500 compared to equity position given different values of f^*
ax = data['return'].cumsum().apply(np.exp).plot()
data[equs].plot(ax=ax, legend=True)
plt.show()
#+end_src

Code is kinda crazy, but that's alright. The plot shows that the
optimal Kelly leverage leads to rather erratic evolution of the equity
position (high volatility). This makes sense, we have a ~4.6 leverage
ratio. As a result of this, practicioners often do not use 'full
Kelly', but instead 'half Kelly'. In the current example this is ~2.3.

* ML-Based Strategy
